# arc-metrics-services.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels: { app: arc-controller }
spec:
  selector:
    app.kubernetes.io/component: gha-rs-controller   # <-- change if different
  ports:
    - name: http-metrics
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: arc-listener-metrics
  namespace: runner-controller
  labels: { app: arc-listener }
spec:
  selector:
    actions.github.com/scale-set-name: aws-arc-ss-6f5bcf88   # <-- change to your listener label(s)
  ports:
    - name: http-metrics
      port: 8080
      targetPort: 8080










# arc-servicemonitors.yaml
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack    # <-- change if your Prom release label differs
spec:
  selector:
    matchLabels:
      app: arc-controller
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-listener-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack    # <-- change if needed
spec:
  selector:
    matchLabels:
      app: arc-listener
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s





kubectl apply -f arc-metrics-services.yaml
kubectl apply -f arc-servicemonitors.yaml


# See the ServiceMonitors
kubectl -n runner-controller get servicemonitors

# Check Prometheus targets are UP
kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090
# In your browser, open http://localhost:9090/targets and look for arc-controller-metrics and arc-listener-metrics (UP)

# Quick queries (should return numbers, not empty):
# In Prometheus or Grafana Explore:
count(gha_controller_running_listeners)
sum(gha_desired_runners)
sum(gha_registered_runners)



# See if Prometheus API is alive
curl -s http://localhost:9090/-/healthy

# List all targets (this will be JSON)
curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | {job: .labels.job, health: .health, endpoint: .scrapeUrl}'

curl -s "http://localhost:9090/api/v1/query?query=gha_controller_running_listeners"
curl -s "http://localhost:9090/api/v1/query?query=gha_desired_runners"


