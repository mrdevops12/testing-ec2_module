# arc-metrics-services.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels: { app: arc-controller }
spec:
  selector:
    app.kubernetes.io/component: gha-rs-controller   # <-- change if different
  ports:
    - name: http-metrics
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: arc-listener-metrics
  namespace: runner-controller
  labels: { app: arc-listener }
spec:
  selector:
    actions.github.com/scale-set-name: aws-arc-ss-6f5bcf88   # <-- change to your listener label(s)
  ports:
    - name: http-metrics
      port: 8080
      targetPort: 8080










# arc-servicemonitors.yaml
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack    # <-- change if your Prom release label differs
spec:
  selector:
    matchLabels:
      app: arc-controller
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-listener-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack    # <-- change if needed
spec:
  selector:
    matchLabels:
      app: arc-listener
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s





kubectl apply -f arc-metrics-services.yaml
kubectl apply -f arc-servicemonitors.yaml


# See the ServiceMonitors
kubectl -n runner-controller get servicemonitors

# Check Prometheus targets are UP
kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090
# In your browser, open http://localhost:9090/targets and look for arc-controller-metrics and arc-listener-metrics (UP)

# Quick queries (should return numbers, not empty):
# In Prometheus or Grafana Explore:
count(gha_controller_running_listeners)
sum(gha_desired_runners)
sum(gha_registered_runners)



# See if Prometheus API is alive
curl -s http://localhost:9090/-/healthy

# List all targets (this will be JSON)
curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | {job: .labels.job, health: .health, endpoint: .scrapeUrl}'

curl -s "http://localhost:9090/api/v1/query?query=gha_controller_running_listeners"
curl -s "http://localhost:9090/api/v1/query?query=gha_desired_runners"



kubectl -n runner-controller describe svc arc-controller-metrics
kubectl -n runner-controller describe svc arc-listener-metrics
kubectl -n monitoring get servicemonitors --show-labels | grep arc
curl -s "http://localhost:9090/api/v1/query?query=gha_controller_running_listeners"
curl -s "http://localhost:9090/api/v1/query?query=gha_desired_runners"



curl -s "http://localhost:9090/api/v1/query?query=gha_controller_running_listeners"
curl -s "http://localhost:9090/api/v1/query?query=gha_desired_runners"




# Controller deployment's selector labels (copy the JSON it prints)
kubectl -n runner-controller get deploy runner-controller-gha-rs-controller \
  -o jsonpath='{.spec.selector.matchLabels}{"\n"}'

# Listener deployment's selector labels (name should match your pod prefix)
kubectl -n runner-controller get deploy aws-arc-ss-6f5bcf88-listener \
  -o jsonpath='{.spec.selector.matchLabels}{"\n"}'



# Controller Service
kubectl -n runner-controller patch svc arc-controller-metrics \
  --type='json' \
  -p='[{"op":"replace","path":"/spec/selector","value": <PASTE_JSON_HERE> }]'

# Listener Service
kubectl -n runner-controller patch svc arc-listener-metrics \
  --type='json' \
  -p='[{"op":"replace","path":"/spec/selector","value": <PASTE_JSON_HERE> }]'



kubectl -n runner-controller describe svc arc-controller-metrics | grep -A2 Endpoints
kubectl -n runner-controller describe svc arc-listener-metrics  | grep -A2 Endpoints

# See that targets exist and are UP
curl -s http://localhost:9090/api/v1/targets | grep -E '"arc-(controller|listener)-metrics"|- "UP"'

# Test a few metrics
curl -s "http://localhost:9090/api/v1/query?query=count(gha_controller_running_listeners)"
curl -s "http://localhost:9090/api/v1/query?query=sum(gha_desired_runners)"
curl -s "http://localhost:9090/api/v1/query?query=sum(gha_registered_runners)"


{"app.kubernetes.io/instance":"runner-controller",
 "app.kubernetes.io/name":"gha-rs-controller",
 "app.kubernetes.io/namespace":"runner-controller"}




kubectl -n runner-controller patch svc arc-controller-metrics \
  --type='json' \
  -p='[{"op":"replace","path":"/spec/selector","value":
{"app.kubernetes.io/instance":"runner-controller","app.kubernetes.io/name":"gha-rs-controller","app.kubernetes.io/namespace":"runner-controller"}}]'


kubectl -n runner-controller describe svc arc-controller-metrics | grep -A2 Endpoints



kubectl -n runner-controller get pod | grep listener
# copy the pod name from the output:
kubectl -n runner-controller get pod <YOUR-LISTENER-POD> -o jsonpath='{.metadata.labels}{"\n"}'

kubectl -n runner-controller patch svc arc-listener-metrics \
  --type='json' \
  -p='[{"op":"replace","path":"/spec/selector","value": <PASTE_JSON_FROM_LISTENER_POD> }]'


kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090




# PATCH the listener Service selector (copyâ€“paste exactly)
kubectl -n runner-controller patch svc arc-listener-metrics \
  -p '{"spec":{"selector":{
    "app.kubernetes.io/component":"runner-scale-set-listener",
    "app.kubernetes.io/instance":"aws-arc-ss"
  }}}'


kubectl -n runner-controller describe svc arc-listener-metrics | grep -A2 Endpoints
# Expect: Endpoints: <pod-ip>:8080   (not <none>)


# (re)port-forward Prometheus if needed
kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090

# Targets should include arc-* and be UP
curl -s http://localhost:9090/api/v1/targets | grep -E '"arc-(controller|listener)-metrics"|\"UP\"'

# Test a few ARC metrics
curl -s "http://localhost:9090/api/v1/query?query=count(gha_controller_running_listeners)"
curl -s "http://localhost:9090/api/v1/query?query=sum(gha_desired_runners)"
curl -s "http://localhost:9090/api/v1/query?query=sum(gha_registered_runners)"



kubectl -n runner-controller get pod aws-arc-ss-6f5bcf88-listener -o jsonpath='{.metadata.labels}{"\n"}'


kubectl -n runner-controller patch svc arc-listener-metrics \
  -p '{"spec":{"selector":{
    "app.kubernetes.io/component":"runner-scale-set-listener",
    "app.kubernetes.io/instance":"aws-arc-ss"
  }}}'

kubectl -n runner-controller describe svc arc-listener-metrics | grep -A2 Endpoints

kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090
curl -s "http://localhost:9090/api/v1/targets" | grep arc-listener-metrics -A3

curl -s "http://localhost:9090/api/v1/query?query=count(gha_controller_running_listeners)"




# List the listener pod(s) with labels
kubectl -n runner-controller get pod -l app.kubernetes.io/component=runner-scale-set-listener --show-labels

# Also print the full label map of the pod you see
kubectl -n runner-controller get pod $(kubectl -n runner-controller get pod -l app.kubernetes.io/component=runner-scale-set-listener -o name) \
  -o jsonpath='{.metadata.labels}{"\n"}'












