gha-eks-addons/quest-eks-addons/modules/grafana/

1) variables.tf


variable "namespace" {
  description = "Namespace to deploy Grafana"
  type        = string
}

variable "grafana_chart_repo" {
  description = "ECR OCI repo base (e.g. oci://<acct>.dkr.ecr.us-east-1.amazonaws.com)"
  type        = string
}

variable "grafana_chart_version" {
  description = "Grafana Helm chart version in ECR (e.g. 8.6.2)"
  type        = string
}

variable "host" {
  description = "Grafana hostname (e.g. grafana.devops-tools.prd.aws.qdx.com)"
  type        = string
}

variable "alb_scheme" {
  description = "ALB scheme (internal|internet-facing)"
  type        = string
  default     = "internal"
}

variable "certificate_arn" {
  description = "ACM certificate ARN to enable HTTPS on the ALB (leave empty for HTTP only)"
  type        = string
  default     = ""
}

variable "external_dns_hostname" {
  description = "Optional ExternalDNS hostname annotation (leave empty if not using ExternalDNS)"
  type        = string
  default     = ""
}

variable "admin_existing_secret" {
  description = "Optional secret name that holds the admin password (key: admin-password)"
  type        = string
  default     = ""
}

variable "admin_existing_secret_key" {
  description = "Key in admin_existing_secret containing the password"
  type        = string
  default     = "admin-password"
}


2) main.tf


# NOTE: this module assumes helm/kubernetes providers are configured in root.
# Do NOT add required_providers here to avoid the kubectl source mismatch you hit before.

resource "helm_release" "grafana" {
  name             = "grafana"
  namespace        = var.namespace
  create_namespace = false

  repository = var.grafana_chart_repo
  chart      = "actions/grafana/grafana"
  version    = var.grafana_chart_version
  atomic     = true

  values = [
    templatefile("${path.module}/values.tftpl", {
      host                   = var.host
      scheme                 = var.alb_scheme
      certificate_arn        = var.certificate_arn
      external_dns_hostname  = var.external_dns_hostname
      admin_secret           = var.admin_existing_secret
      admin_secret_key       = var.admin_existing_secret_key
    })
  ]
}



3) values.tftpl

# --- Grafana base options ---
replicas: 1

%{ if admin_secret != "" }
admin:
  existingSecret: ${admin_secret}
  existingSecretPasswordKey: ${admin_secret_key}
%{ endif }

service:
  type: ClusterIP
  port: 80

# --- Ingress via AWS ALB ---
ingress:
  enabled: true
  ingressClassName: alb
  annotations:
    alb.ingress.kubernetes.io/scheme: ${scheme}
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
    alb.ingress.kubernetes.io/healthcheck-path: /login
%{ if certificate_arn != "" }
    alb.ingress.kubernetes.io/certificate-arn: ${certificate_arn}
    alb.ingress.kubernetes.io/ssl-redirect: "443"
%{ endif }
%{ if external_dns_hostname != "" }
    external-dns.alpha.kubernetes.io/hostname: ${external_dns_hostname}
%{ endif }
  hosts:
    - ${host}
  path: /
  pathType: Prefix




gha-eks-addons/quest-eks-addons/addons.tf

module "grafana" {
  source = "./modules/grafana"

  namespace               = "monitoring"
  grafana_chart_repo      = var.grafana_chart_repo
  grafana_chart_version   = var.grafana_chart_version

  host                    = var.grafana_host
  alb_scheme              = var.grafana_alb_scheme           # "internal" by default
  certificate_arn         = var.grafana_certificate_arn      # set to ACM ARN to enable HTTPS
  external_dns_hostname   = var.grafana_external_dns_hostname # leave "" if not using ExternalDNS

  # Optional: only if you already created a secret with admin password
  admin_existing_secret     = var.grafana_admin_existing_secret
  admin_existing_secret_key = var.grafana_admin_existing_secret_key
}


variables.tf


variable "grafana_chart_repo" {
  type        = string
  description = "ECR OCI repo base, e.g. oci://<acct>.dkr.ecr.us-east-1.amazonaws.com"
}

variable "grafana_chart_version" {
  type        = string
  description = "Grafana chart version in ECR, e.g. 8.6.2"
}

variable "grafana_host" {
  type        = string
  description = "Hostname to expose Grafana, e.g. grafana.devops-tools.prd.aws.qdx.com"
}

variable "grafana_alb_scheme" {
  type        = string
  description = "ALB scheme: internal or internet-facing"
  default     = "internal"
}

variable "grafana_certificate_arn" {
  type        = string
  description = "ACM cert ARN for HTTPS on ALB (leave empty for HTTP only)"
  default     = ""
}

variable "grafana_external_dns_hostname" {
  type        = string
  description = "ExternalDNS hostname annotation (leave empty if not using ExternalDNS)"
  default     = ""
}

variable "grafana_admin_existing_secret" {
  type        = string
  description = "Optional existing secret name with admin password (key set below)"
  default     = ""
}

variable "grafana_admin_existing_secret_key" {
  type        = string
  description = "Key in the existing secret that contains admin password"
  default     = "admin-password"
}



orion-prd.tfvars


# Grafana Helm (from ECR)
grafana_chart_repo    = "oci://817786531545.dkr.ecr.us-east-1.amazonaws.com"
grafana_chart_version = "8.6.2"

# ALB/Ingress
grafana_host                   = "grafana.devops-tools.prd.aws.qdx.com"
grafana_alb_scheme            = "internal"
grafana_certificate_arn       = "arn:aws:acm:us-east-1:817786531545:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
grafana_external_dns_hostname = "grafana.devops-tools.prd.aws.qdx.com"

# Optional admin password via existing secret (or leave blank to use chart defaults)
grafana_admin_existing_secret      = ""
grafana_admin_existing_secret_key  = "admin-password"

