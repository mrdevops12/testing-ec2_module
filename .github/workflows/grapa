modules/grafana/variables.tf


variable "namespace" {
  description = "Namespace to deploy Grafana"
  type        = string
}

variable "grafana_chart_repo" {
  description = "OCI repo for Grafana chart"
  type        = string
}

variable "grafana_chart_version" {
  description = "Grafana chart version (tag in ECR)"
  type        = string
}

variable "admin_user" {
  description = "Grafana admin username"
  type        = string
  default     = "admin"
}

variable "admin_password" {
  description = "Grafana admin password"
  type        = string
  sensitive   = true
}

variable "prometheus_url" {
  description = "URL of Prometheus service for datasource"
  type        = string
  default     = "http://kube-prometheus-stack-prometheus.monitoring:9090"
}

variable "create_namespace" {
  description = "Create the namespace & PSS labels (false if another module already creates it)"
  type        = bool
  default     = false
}

# Ingress / ALB settings
variable "ingress_enabled" {
  type        = bool
  default     = true
}

variable "ingress_host" {
  description = "FQDN to expose Grafana (must exist/wildcard in your private hosted zone)"
  type        = string
}

variable "alb_scheme" {
  description = "internal | internet-facing"
  type        = string
  default     = "internal"
}

variable "acm_certificate_arn" {
  description = "ACM certificate ARN for HTTPS listener"
  type        = string
  default     = ""
}

variable "alb_group_name" {
  description = "Optional ALB Ingress group.name to share one ALB"
  type        = string
  default     = "monitoring"
}

variable "alb_additional_annotations" {
  description = "Any extra ALB annotations to merge"
  type        = map(string)
  default     = {}
}


*******************************************************************************

modules/grafana/main.tf




terraform {
  required_version = ">= 1.3.2"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.75, < 6.0.0"
    }
    helm = {
      source  = "hashicorp/helm"
      version = ">= 2.7"
    }
    kubectl = {
      source  = "alekc/kubectl"
      version = ">= 2.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = ">= 2.20"
    }
  }
}

# Optional: create namespace + PSS labels if needed
resource "kubectl_manifest" "monitoring_namespace" {
  count = var.create_namespace ? 1 : 0

  yaml_body = <<YAML
apiVersion: v1
kind: Namespace
metadata:
  name: ${var.namespace}
  labels:
    kubernetes.io/metadata.name: ${var.namespace}
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: v1.30
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/audit-version: v1.30
    pod-security.kubernetes.io/warn: baseline
    pod-security.kubernetes.io/warn-version: v1.30
YAML
}

locals {
  ns_depends_on = var.create_namespace ? [kubectl_manifest.monitoring_namespace[0]] : []
}

resource "helm_release" "grafana" {
  name             = "grafana"
  namespace        = var.namespace
  create_namespace = false
  repository       = var.grafana_chart_repo          # e.g. "oci://<acct>.dkr.ecr.<region>.amazonaws.com/actions/grafana"
  chart            = "grafana"
  version          = var.grafana_chart_version
  atomic           = true

  values = [
    yamlencode({
      adminUser     = var.admin_user
      adminPassword = var.admin_password

      # Keep service ClusterIP; ingress will front it with an ALB
      service = {
        type = "ClusterIP"
        port = 80
      }

      # Default Prometheus datasource
      datasources = {
        "datasources.yaml" = {
          apiVersion  = 1
          datasources = [{
            name      = "Prometheus"
            type      = "prometheus"
            access    = "proxy"
            url       = var.prometheus_url
            isDefault = true
          }]
        }
      }

      # ---- ALB Ingress (AWS Load Balancer Controller) ----
      ingress = {
        enabled          = var.ingress_enabled
        ingressClassName = "alb"
        annotations      = merge({
          # recommended ALB bits
          "alb.ingress.kubernetes.io/scheme"        = var.alb_scheme
          "alb.ingress.kubernetes.io/target-type"   = "ip"
          "alb.ingress.kubernetes.io/listen-ports"  = "[{\"HTTPS\":443}]"
          "alb.ingress.kubernetes.io/ssl-redirect"  = "443"
          # keep for older clusters that still honor the annotation
          "kubernetes.io/ingress.class"             = "alb"
        },
        var.acm_certificate_arn != "" ? {
          "alb.ingress.kubernetes.io/certificate-arn" = var.acm_certificate_arn
        } : {},
        var.alb_group_name != "" ? {
          "alb.ingress.kubernetes.io/group.name" = var.alb_group_name
        } : {},
        var.alb_additional_annotations)

        hosts = [{
          host  = var.ingress_host
          paths = [{
            path     = "/"
            pathType = "Prefix"
          }]
        }]

        # ALB terminates TLS via ACM (annotation), so no .tls section needed
      }
    })
  ]

  depends_on = local.ns_depends_on
}

*****************************

addons.tf

module "grafana" {
  source                = "./modules/grafana"
  namespace             = "monitoring"
  create_namespace      = false

  grafana_chart_repo    = "oci://817786531545.dkr.ecr.us-east-1.amazonaws.com/actions/grafana"
  grafana_chart_version = "8.6.2"

  admin_user            = "admin"
  admin_password        = var.grafana_admin_password

  # points to Prometheus from kube-prometheus-stack
  prometheus_url        = "http://kube-prometheus-stack-prometheus.monitoring:9090"

  # Ingress / ALB
  ingress_enabled       = true
  ingress_host          = "grafana.devops-tools.prd.aws.qdx.com"   # or your chosen host under the private zone
  alb_scheme            = "internal"
  acm_certificate_arn   = var.grafana_acm_arn                      # ACM cert in the same region/account
  alb_group_name        = "monitoring"
}




*********************************************************************


variable "grafana_admin_password" {
  type      = string
  sensitive = true
}

variable "grafana_acm_arn" {
  type    = string
  default = ""
}









