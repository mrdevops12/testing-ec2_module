kubectl -n win-runner-controller apply -f win-arc-metrics-services.yaml
kubectl -n win-runner-controller describe svc arc-controller-metrics | grep -A2 Endpoints
kubectl -n win-runner-controller describe svc arc-listener-metrics   | grep -A2 Endpoints


kubectl -n monitoring apply -f win-arc-servicemonitors.yaml
kubectl -n monitoring get servicemonitors | grep arc-



kubectl -n win-runner-controller get pod -l app.kubernetes.io/name=gha-rs-controller -o jsonpath='{.items[0].metadata.labels}'
kubectl -n win-runner-controller get pod -l app.kubernetes.io/component=runner-scale-set-listener -o jsonpath='{.items[0].metadata.labels}'

kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090


curl -s http://localhost:9090/api/v1/targets | jq -r '
  .data.activeTargets[]
  | select(.labels.namespace=="win-runner-controller")
  | select((.labels.job // "" | tostring) | test("arc-(controller|listener)-metrics"))
  | {job: .labels.job, ns: .labels.namespace, health: .health, url: .scrapeUrl}'



curl -s "http://localhost:9090/api/v1/query?query=sum(gha_desired_runners{namespace=\"win-runner-controller\"})"
curl -s "http://localhost:9090/api/v1/query?query=sum(gha_registered_runners{namespace=\"win-runner-controller\"})"
curl -s "http://localhost:9090/api/v1/query?query=count(gha_controller_running_listeners{namespace=\"win-runner-controller\"})"

/^(runner-set|win-runner-set)$/






kubectl -n monitoring get servicemonitors | grep -E 'arc-(controller|listener)-metrics'

# Show what namespaces each SM scrapes
kubectl -n monitoring get servicemonitor arc-controller-metrics-win -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'
kubectl -n monitoring get servicemonitor arc-listener-metrics-win   -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'

# Also check the label selectors & endpoint port
kubectl -n monitoring get servicemonitor arc-controller-metrics-win -o jsonpath='{.spec.selector.matchLabels}{"\n"}{.spec.endpoints[*].port}{"\n"}'
kubectl -n monitoring get servicemonitor arc-listener-metrics-win   -o jsonpath='{.spec.selector.matchLabels}{"\n"}{.spec.endpoints[*].port}{"\n"}'







# Add both namespaces to namespaceSelector.matchNames for controller metrics
kubectl -n monitoring patch servicemonitor arc-controller-metrics-win \
  --type='merge' \
  -p '{"spec":{"namespaceSelector":{"matchNames":["runner-controller","win-runner-controller"]}}}'

# Add both namespaces to namespaceSelector.matchNames for listener metrics
kubectl -n monitoring patch servicemonitor arc-listener-metrics-win \
  --type='merge' \
  -p '{"spec":{"namespaceSelector":{"matchNames":["runner-controller","win-runner-controller"]}}}'





kubectl -n monitoring get servicemonitor arc-controller-metrics-win \
  -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'
kubectl -n monitoring get servicemonitor arc-listener-metrics-win \
  -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'



kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090

# Then on the same box:
curl -s http://localhost:9090/api/v1/targets \
| jq -r '.data.activeTargets[]
  | select(.labels.job|test("arc-(controller|listener)-metrics"))
  | "\(.labels.job)  ns=\(.labels.namespace)  health=\(.health)  url=\(.scrapeUrl)"'


label_values(gha_desired_runners, namespace)

count by (namespace) (gha_desired_runners)


label_values(kube_pod_info{namespace=~"runner-set|win-runner-set"}, namespace)


count by (namespace) (kube_pod_info{namespace=~"runner-set|win-runner-set"})


-- Pending
sum by (namespace) (gha_pending_runners{namespace=~"$RunnerNamespace"})

-- Registered
sum by (namespace) (gha_registered_runners{namespace=~"$RunnerNamespace"})

-- Desired
sum by (namespace) (gha_desired_runners{namespace=~"$RunnerNamespace"})

-- Busy
sum by (namespace) (gha_busy_runners{namespace=~"$RunnerNamespace"})

-- Idle (if exposed)
sum by (namespace) (gha_idle_runners{namespace=~"$RunnerNamespace"})

-- Failed (if exposed)
sum by (namespace) (gha_failed_runners{namespace=~"$RunnerNamespace"})






