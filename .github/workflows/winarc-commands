kubectl -n win-runner-controller apply -f win-arc-metrics-services.yaml
kubectl -n win-runner-controller describe svc arc-controller-metrics | grep -A2 Endpoints
kubectl -n win-runner-controller describe svc arc-listener-metrics   | grep -A2 Endpoints


kubectl -n monitoring apply -f win-arc-servicemonitors.yaml
kubectl -n monitoring get servicemonitors | grep arc-



kubectl -n win-runner-controller get pod -l app.kubernetes.io/name=gha-rs-controller -o jsonpath='{.items[0].metadata.labels}'
kubectl -n win-runner-controller get pod -l app.kubernetes.io/component=runner-scale-set-listener -o jsonpath='{.items[0].metadata.labels}'

kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090


curl -s http://localhost:9090/api/v1/targets | jq -r '
  .data.activeTargets[]
  | select(.labels.namespace=="win-runner-controller")
  | select((.labels.job // "" | tostring) | test("arc-(controller|listener)-metrics"))
  | {job: .labels.job, ns: .labels.namespace, health: .health, url: .scrapeUrl}'



curl -s "http://localhost:9090/api/v1/query?query=sum(gha_desired_runners{namespace=\"win-runner-controller\"})"
curl -s "http://localhost:9090/api/v1/query?query=sum(gha_registered_runners{namespace=\"win-runner-controller\"})"
curl -s "http://localhost:9090/api/v1/query?query=count(gha_controller_running_listeners{namespace=\"win-runner-controller\"})"

/^(runner-set|win-runner-set)$/






kubectl -n monitoring get servicemonitors | grep -E 'arc-(controller|listener)-metrics'

# Show what namespaces each SM scrapes
kubectl -n monitoring get servicemonitor arc-controller-metrics-win -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'
kubectl -n monitoring get servicemonitor arc-listener-metrics-win   -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'

# Also check the label selectors & endpoint port
kubectl -n monitoring get servicemonitor arc-controller-metrics-win -o jsonpath='{.spec.selector.matchLabels}{"\n"}{.spec.endpoints[*].port}{"\n"}'
kubectl -n monitoring get servicemonitor arc-listener-metrics-win   -o jsonpath='{.spec.selector.matchLabels}{"\n"}{.spec.endpoints[*].port}{"\n"}'







# Add both namespaces to namespaceSelector.matchNames for controller metrics
kubectl -n monitoring patch servicemonitor arc-controller-metrics-win \
  --type='merge' \
  -p '{"spec":{"namespaceSelector":{"matchNames":["runner-controller","win-runner-controller"]}}}'

# Add both namespaces to namespaceSelector.matchNames for listener metrics
kubectl -n monitoring patch servicemonitor arc-listener-metrics-win \
  --type='merge' \
  -p '{"spec":{"namespaceSelector":{"matchNames":["runner-controller","win-runner-controller"]}}}'





kubectl -n monitoring get servicemonitor arc-controller-metrics-win \
  -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'
kubectl -n monitoring get servicemonitor arc-listener-metrics-win \
  -o jsonpath='{.spec.namespaceSelector.matchNames}{"\n"}'



kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090:9090

# Then on the same box:
curl -s http://localhost:9090/api/v1/targets \
| jq -r '.data.activeTargets[]
  | select(.labels.job|test("arc-(controller|listener)-metrics"))
  | "\(.labels.job)  ns=\(.labels.namespace)  health=\(.health)  url=\(.scrapeUrl)"'


label_values(gha_desired_runners, namespace)

count by (namespace) (gha_desired_runners)


label_values(kube_pod_info{namespace=~"runner-set|win-runner-set"}, namespace)


count by (namespace) (kube_pod_info{namespace=~"runner-set|win-runner-set"})


-- Pending
sum by (namespace) (gha_pending_runners{namespace=~"$RunnerNamespace"})
sum by (namespace) (gha_pending_runners{namespace=~"$RunnerNamespace"})

sum by (namespace) (gha_desired_runners{namespace="runner-set"})



-- Registered
sum by (namespace) (gha_registered_runners{namespace=~"$RunnerNamespace"})

-- Desired
sum by (namespace) (gha_desired_runners{namespace=~"$RunnerNamespace"})

-- Busy
sum by (namespace) (gha_busy_runners{namespace=~"$RunnerNamespace"})

-- Idle (if exposed)
sum by (namespace) (gha_idle_runners{namespace=~"$RunnerNamespace"})

-- Failed (if exposed)
sum by (namespace) (gha_failed_runners{namespace=~"$RunnerNamespace"})






kubectl -n arc-systems get svc -l app.kubernetes.io/name=actions-runner-controller -o wide
kubectl -n monitoring get deploy kube-prometheus-stack-kube-state-metrics
kubectl -n monitoring get servicemonitor | grep kube-state



# Linux controller
---
apiVersion: v1
kind: Service
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels:
    app.kubernetes.io/name: actions-runner-controller
    app.kubernetes.io/component: controller-manager
spec:
  selector:
    app.kubernetes.io/name: actions-runner-controller
    app.kubernetes.io/component: controller-manager
  ports:
    - name: metrics
      port: 8443
      targetPort: 8443
      protocol: TCP
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack   # must match your Prometheus Helm release label
spec:
  namespaceSelector:
    matchNames: ["runner-controller"]
  selector:
    matchLabels:
      app.kubernetes.io/name: actions-runner-controller
      app.kubernetes.io/component: controller-manager
  endpoints:
    - port: metrics
      interval: 30s
      scheme: https
      tlsConfig:
        insecureSkipVerify: true

# Windows controller (if you run it)
---
apiVersion: v1
kind: Service
metadata:
  name: arc-controller-metrics
  namespace: win-runner-controller
  labels:
    app.kubernetes.io/name: actions-runner-controller
    app.kubernetes.io/component: controller-manager
spec:
  selector:
    app.kubernetes.io/name: actions-runner-controller
    app.kubernetes.io/component: controller-manager
  ports:
    - name: metrics
      port: 8443
      targetPort: 8443
      protocol: TCP
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-controller-metrics
  namespace: win-runner-controller
  labels:
    release: kube-prometheus-stack
spec:
  namespaceSelector:
    matchNames: ["win-runner-controller"]
  selector:
    matchLabels:
      app.kubernetes.io/name: actions-runner-controller
      app.kubernetes.io/component: controller-manager
  endpoints:
    - port: metrics
      interval: 30s
      scheme: https
      tlsConfig:
        insecureSkipVerify: true









# SVC: ARC controller metrics
apiVersion: v1
kind: Service
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels:
    app: arc-controller
spec:
  selector:
    app.kubernetes.io/name: actions-runner-controller
  ports:
  - name: http-metrics
    port: 8080
    targetPort: 8080
---
# SVC: ARC listener metrics
apiVersion: v1
kind: Service
metadata:
  name: arc-listener-metrics
  namespace: runner-controller
  labels:
    app: arc-listener
spec:
  selector:
    app.kubernetes.io/name: gha-runner-scale-set-listener
  ports:
  - name: http-metrics
    port: 8080
    targetPort: 8080
---
# SM: scrape controller
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-controller-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      app: arc-controller
  endpoints:
  - port: http-metrics
    path: /metrics
    interval: 30s
---
# SM: scrape listener
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: arc-listener-metrics
  namespace: runner-controller
  labels:
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      app: arc-listener
  endpoints:
  - port: http-metrics
    path: /metrics
    interval: 30s




# listeners exposed by the ARC controller
gha_controller_running_listeners

# same, scoped to a namespace
gha_controller_running_listeners{namespace=~"runner-controller|win-runner-controller"}

# runners / jobs metrics
sum(gha_desired_runners)                   # desired
sum(gha_registered_runners)               # registered
sum(gha_idle_runners)                     # idle
sum(gha_running_jobs)                     # currently running jobs


actions_github_com_scale_set_name
exported_namespace =~ $SystemNamespace


label_values(
  gha_desired_runners{exported_namespace=~"$SystemNamespace"},
  actions_github_com_scale_set_name
)






histogram_quantile(
  0.5,
  sum by (le) (
    rate(
      gha_job_startup_duration_seconds_bucket{
        actions_github_com_scale_set_name=~"$Scaleset",
        namespace=~"$RunnerNamespace"
      }[$__rate_interval]
    )
  )
)

sum by (le) (
  increase(gha_job_startup_duration_seconds_bucket[24h])
)




sum by (le) (
  rate(
    gha_job_startup_duration_seconds_bucket{
      exported_namespace=~"$RunnerNamespace",
      actions_github_com_scale_set_name=~"$Scaleset"
    }[$__rate_interval]
  )
)

