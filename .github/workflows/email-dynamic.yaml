name: Email Notification Only

on:
  workflow_call:
    inputs:
      DEPLOY_META_JSON:
        description: 'Base64-encoded JSON with deployment metadata (any keys)'
        required: true
        type: string
    # No secrets needed here other than your mail.py will use its own config

jobs:
  email-only:
    runs-on: arc-rs-nonprod   # or ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Capture timestamps
        run: |
          echo "BUILD_START=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "BUILD_END=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Build & send Email only
        env:
          INPUT_DEPLOY_META_JSON: ${{ inputs.DEPLOY_META_JSON }}
          BUILD_START:            ${{ env.BUILD_START }}
          BUILD_END:              ${{ env.BUILD_END }}
          GITHUB_SHA:             ${{ github.sha }}
          GITHUB_RUN_NUMBER:      ${{ github.run_number }}
          GITHUB_REPOSITORY:      ${{ github.repository }}
          GITHUB_ACTOR:           ${{ github.actor }}
          EMAIL_TO:               yourname@yourcompany.com  # or use a secret here
        run: |
          python3 << 'EOF'
          import os, json, base64, subprocess

          # Decode whatever the caller sent
          md = json.loads(base64.b64decode(os.environ['INPUT_DEPLOY_META_JSON']))

          # --- CI context (static) ---
          status   = md.pop('status', '').upper()
          build_no = md.pop('build', '')
          start    = os.environ['BUILD_START']
          end      = os.environ['BUILD_END']
          sha      = os.environ['GITHUB_SHA'][:8]
          msg      = subprocess.check_output(
                        ['git','log','-1','--pretty=format:%s']
                      ).decode()
          run_id   = os.environ['GITHUB_RUN_NUMBER']
          actor    = os.environ['GITHUB_ACTOR']

          # Build table rows for CI context
          build_rows = "\n".join([
            f"<tr><td><b>Status</b></td><td>{status}</td></tr>",
            f"<tr><td><b>Build Number</b></td><td>#{build_no}</td></tr>",
            f"<tr><td><b>Triggered By</b></td><td>{actor}</td></tr>",
            f"<tr><td><b>Start Time</b></td><td>{start}</td></tr>",
            f"<tr><td><b>End Time</b></td><td>{end}</td></tr>",
            f"<tr><td><b>Commit</b></td><td>{sha} - {msg}</td></tr>",
            f"<tr><td><b>Workflow Run</b></td><td>#{run_id}</td></tr>"
          ])

          # --- Release context (fully dynamic) ---
          # Everything left in md becomes its own row
          release_rows = "\n".join(
            f"<tr><td><b>{k.replace('_',' ').title()}</b></td><td>{v}</td></tr>"
            for k, v in md.items()
          )

          # --- Compose HTML ---
          html = f"""
          <html>
            <body>
              <h2>Build Information</h2>
              <table border="1" cellpadding="6" cellspacing="0">
                {build_rows}
              </table>
              <h2>Release Information</h2>
              <table border="1" cellpadding="6" cellspacing="0">
                {release_rows}
              </table>
              <p><a href="https://github.com/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{run_id}">
                View Workflow Run
              </a></p>
              <p><a href="https://github.com/{os.environ['GITHUB_REPOSITORY']}/commits/{md.get('branch','')}">
                View Branch Commits
              </a></p>
            </body>
          </html>
          """
          with open('email_body.html','w') as f:
            f.write(html)

          # Send via your mail.py helper
          subprocess.check_call([
            "python3", ".github/workflows/mail.py",
            os.environ['EMAIL_TO'],
            f"[{end}] Build #{run_id}: {status}",
            "email_body.html"
          ])
          EOF
