# .github/workflows/teams-notification-source.yml
name: Teams + Email Notification Workflow

on:
  workflow_call:
    inputs:
      DEPLOY_META_JSON:
        description: 'Base64‐encoded JSON with deployment metadata (any keys)'
        required: true
        type: string

    secrets:
      TEAMS_WEBHOOK_URL:
        description: 'Teams Incoming Webhook URL'
        required: true

jobs:
  notify-and-email:
    runs-on: arc-rs-nonprod   # or ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Capture timestamps
        run: |
          echo "BUILD_START=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "BUILD_END=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Run Python to build & send
        env:
          INPUT_DEPLOY_META_JSON: ${{ inputs.DEPLOY_META_JSON }}
          BUILD_START:            ${{ env.BUILD_START }}
          BUILD_END:              ${{ env.BUILD_END }}
          GITHUB_SHA:             ${{ github.sha }}
          GITHUB_RUN_NUMBER:      ${{ github.run_number }}
          GITHUB_REPOSITORY:      ${{ github.repository }}
          GITHUB_ACTOR:           ${{ github.actor }}
          TEAMS_WEBHOOK_URL:      ${{ secrets.TEAMS_WEBHOOK_URL }}
          EMAIL_TO:               yourname@yourcompany.com
        run: |
          python3 << 'EOF'
          import os, json, base64, subprocess, requests

          # Decode the arbitrary payload
          md = json.loads(base64.b64decode(os.environ['INPUT_DEPLOY_META_JSON']))

          # --- CI context (static facts) ---
          status = md.get('status', '').upper()
          build_no = md.get('build', '')
          start  = os.environ['BUILD_START']
          end    = os.environ['BUILD_END']
          sha    = os.environ['GITHUB_SHA'][:8]
          msg    = subprocess.check_output(
                     ['git','log','-1','--pretty=format:%s']
                   ).decode()
          run_id = os.environ['GITHUB_RUN_NUMBER']
          actor  = os.environ['GITHUB_ACTOR']

          emoji_map = {'SUCCESS':'✅','FAILED':'❌','CANCELLED':'⚠️'}
          color_map = {'SUCCESS':'#00FF00','FAILED':'#FF0000','CANCELLED':'#FFA500'}
          emoji = emoji_map.get(status, 'ℹ️')
          theme = color_map.get(status, '#808080')

          build_facts = [
            {'name':'Status',       'value':f"{emoji} {status}"},
            {'name':'Build Number', 'value':f"#{build_no}"},
            {'name':'Triggered By', 'value':actor},
            {'name':'Start Time',   'value':start},
            {'name':'End Time',     'value':end},
            {'name':'Commit',       'value':f"{sha} - {msg}"},
            {'name':'Workflow Run', 'value':f"#{run_id}"}
          ]

          # --- Dynamic release facts (everything except 'status' & 'build') ---
          release_facts = []
          for k, v in md.items():
            if k.lower() in ('status','build'):
              continue
            name = k.replace('_',' ').title()
            release_facts.append({'name': name, 'value': str(v)})

          # --- Assemble Teams card ---
          card = {
            "@type":      "MessageCard",
            "@context":   "https://schema.org/extensions",
            "themeColor": theme,
            "summary":    f"Build {status}",
            "sections": [
              {"activityTitle":"🔧 Build Information",   "facts": build_facts,   "markdown": True},
              {"startGroup": True,                       "text": "───────────────", "markdown": True},
              {"startGroup": True, "activityTitle":"🚀 Release Information", "facts": release_facts, "markdown": True}
            ]
          }

          # POST to Teams
          requests.post(
            os.environ['TEAMS_WEBHOOK_URL'],
            json=card,
            headers={'Content-Type':'application/json'}
          ).raise_for_status()

          # --- Build single HTML table for email ---
          html_rows = ""
          # first CI rows
          for fact in build_facts:
            html_rows += f"<tr><td><b>{fact['name']}</b></td><td>{fact['value']}</td></tr>\n"
          # then release rows
          for fact in release_facts:
            html_rows += f"<tr><td><b>{fact['name']}</b></td><td>{fact['value']}</td></tr>\n"

          html = f"""
          <html>
            <body>
              <h2>Build & Release Notification</h2>
              <table border="1" cellpadding="6" cellspacing="0">
                {html_rows}
              </table>
              <p><a href="https://github.com/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{run_id}">
                View Workflow Run
              </a></p>
              <p><a href="https://github.com/{os.environ['GITHUB_REPOSITORY']}/commits/{md.get('branch','')}">
                View Branch Commits
              </a></p>
            </body>
          </html>
          """
          with open('email_body.html','w') as f:
            f.write(html)

          # Send email via your mail.py helper
          subprocess.check_call([
            "python3", ".github/workflows/mail.py",
            os.environ['EMAIL_TO'],
            f"[{end}] Build #{run_id}: {status}",
            "email_body.html"
          ])
          EOF
