# .github/workflows/teams-email-notification-source.yml
name: Teams + Email Notification Workflow

on:
  workflow_call:
    inputs:
      DEPLOY_META_JSON:
        description: 'Base64‐encoded JSON with deployment metadata (any keys)'
        required: true
        type: string
      EMAIL_TO:
        description: 'Email address (or comma-separated list) to send the HTML email to'
        required: true
        type: string
      SOURCE_REPO:
        description: 'Caller repo (owner/name) for the “View Workflow Run” link'
        required: true
        type: string
      SOURCE_RUN_ID:
        description: 'Caller workflow run_id for the link'
        required: true
        type: string

    secrets:
      TEAMS_WEBHOOK_URL:
        description: 'Teams Incoming Webhook URL'
        required: true

jobs:
  notify-and-email:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Capture timestamps
        run: |
          echo "BUILD_START=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "BUILD_END=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Validate required inputs
        run: |
          if [ -z "${{ inputs.EMAIL_TO }}" ]; then
            echo "❌ Missing required input: EMAIL_TO" >&2
            exit 1
          fi
          if [ -z "${{ inputs.SOURCE_REPO }}" ]; then
            echo "❌ Missing required input: SOURCE_REPO" >&2
            exit 1
          fi
          if [ -z "${{ inputs.SOURCE_RUN_ID }}" ]; then
            echo "❌ Missing required input: SOURCE_RUN_ID" >&2
            exit 1
          fi

      - name: Build & send Teams + Email
        env:
          INPUT_DEPLOY_META_JSON: ${{ inputs.DEPLOY_META_JSON }}
          TEAMS_WEBHOOK_URL:     ${{ secrets.TEAMS_WEBHOOK_URL }}
          EMAIL_TO:              ${{ inputs.EMAIL_TO }}
          SOURCE_REPO:           ${{ inputs.SOURCE_REPO }}
          SOURCE_RUN_ID:         ${{ inputs.SOURCE_RUN_ID }}
          BUILD_START:           ${{ env.BUILD_START }}
          BUILD_END:             ${{ env.BUILD_END }}
          GITHUB_SHA:            ${{ github.sha }}
          GITHUB_ACTOR:          ${{ github.actor }}
        run: |
          python3 << 'EOF'
          import os, json, base64, subprocess, requests

          # 1) Decode metadata
          md = json.loads(base64.b64decode(os.environ['INPUT_DEPLOY_META_JSON']))

          # 2) Pull out CI context
          status   = md.pop('status','').upper()
          build_no = md.pop('build','')
          start    = os.environ['BUILD_START']
          end      = os.environ['BUILD_END']
          sha      = os.environ['GITHUB_SHA'][:8]
          msg      = subprocess.check_output(
                        ['git','log','-1','--pretty=format:%s']
                      ).decode()
          actor    = os.environ['GITHUB_ACTOR']
          repo     = os.environ['SOURCE_REPO']
          run_id   = os.environ['SOURCE_RUN_ID']

          # 3) Emoji & theme
          emoji_map = {'SUCCESS':'✅','FAILED':'❌','CANCELLED':'⚠️'}
          color_map = {'SUCCESS':'#00FF00','FAILED':'#FF0000','CANCELLED':'#FFA500'}
          emoji = emoji_map.get(status,'ℹ️')
          theme = color_map.get(status,'#808080')

          # 4) Build and release facts
          build_facts = [
            {'name':'Status',       'value':f"{emoji} {status}"},
            {'name':'Build Number', 'value':f"#{build_no}"},
            {'name':'Triggered By', 'value':actor},
            {'name':'Start Time',   'value':start},
            {'name':'End Time',     'value':end},
            {'name':'Commit',       'value':f"{sha} - {msg}"},
            {'name':'Workflow Run', 'value':f"#{run_id}"}
          ]
          release_facts = [
            {'name': k.replace('_',' ').title(), 'value': str(v)}
            for k, v in md.items()
          ]

          # 5) Send Teams card
          card = {
            "@type":"MessageCard","@context":"https://schema.org/extensions",
            "themeColor": theme,
            "summary": f"Build {status}",
            "sections": [
              {"activityTitle":"🔧 Build Information",   "facts": build_facts,   "markdown": True},
              {"startGroup":True,                       "text":"───────────────", "markdown": True},
              {"startGroup":True,"activityTitle":"🚀 Release Information","facts": release_facts,"markdown":True}
            ]
          }
          requests.post(
            os.environ['TEAMS_WEBHOOK_URL'],
            json=card,
            headers={'Content-Type':'application/json'}
          ).raise_for_status()

          # 6) Render HTML tables
          rows1 = "\n".join(f"<tr><td><b>{f['name']}</b></td><td>{f['value']}</td></tr>" for f in build_facts)
          rows2 = "\n".join(f"<tr><td><b>{f['name']}</b></td><td>{f['value']}</td></tr>" for f in release_facts)
          html = f"""
          <html><body>
            <h2>Build Information</h2>
            <table border="1" cellpadding="6">{rows1}</table>
            <h2>Release Information</h2>
            <table border="1" cellpadding="6">{rows2}</table>
            <p><a href="https://github.com/{repo}/actions/runs/{run_id}">View Workflow Run</a></p>
          </body></html>
          """
          with open('email_body.html','w') as f: f.write(html)

          # 7) Email HTML to each address
          for addr in os.environ['EMAIL_TO'].split(','):
            addr = addr.strip()
            if not addr: continue
            subprocess.check_call([
              "python3", ".github/workflows/mail.py",
              addr,
              f"[{end}] Build #{run_id}: {status}",
              "email_body.html"
            ])
          EOF
