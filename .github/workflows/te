variable "ecr_password" {
  description = "Password/token to pull Helm charts from private ECR"
  type        = string
  sensitive   = true
}


terraform plan \
  -var-file=tfvars/orion-${{ env.ENVIRONMENT }}.tfvars \
  -var "ecr_password=${{ secrets.AWS_SHAREDTOOLS_PRD_ECR_PASSWORD }}"



repository = "oci://817786531545.dkr.ecr.us-east-1.amazonaws.com/actions/prometheus"
chart      = "kube-prometheus-stack"
version    = var.prometheus_chart_version

prometheus_chart_repo    = "oci://817786531545.dkr.ecr.us-east-1.amazonaws.com"
prometheus_chart_version = "77.6.0"
# (plus cluster_name etc.)


# modules/prometheus_stack/main.tf
resource "helm_release" "prometheus_stack" {
  name       = "kube-prometheus-stack"
  namespace  = var.namespace

  repository = var.prometheus_chart_repo
  chart      = "actions/prometheus/kube-prometheus-stack"
  version    = var.prometheus_chart_version

  atomic = true
  values = [ file("${path.module}/arc-scrape-config.yaml") ]
}

module "falcon-sensor" {
  source = "./modules/falcon-sensor"

  # …existing inputs…
  falcon_cid   = var.falcon_cid
  ecr_password = var.ecr_password  # if you use ECR-auth for the module
}

- name: Terraform Validate
  env:
    TF_VAR_falcon_cid: ${{ secrets.FALCON_CID }}
    TF_VAR_ecr_password: ${{ secrets.AWS_SHAREDTOOLS_PRD_ECR_PASSWORD }}
  run: terraform validate



- name: Terraform Plan
  working-directory: quest-eks-addons
  env:
    TF_VAR_ecr_password: ${{ secrets.AWS_SHAREDTOOLS_PRD_ECR_PASSWORD }}
    TF_VAR_falcon_cid:   ${{ secrets.FALCON_CID }}
  run: |
    terraform plan -input=false -no-color \
      -var-file="tfvars/orion-${{ env.ENVIRONMENT }}.tfvars"






resource "helm_release" "prometheus_stack" {
  name       = "kube-prometheus-stack"
  repository = var.prometheus_chart_repo
  chart      = "actions/prometheus/kube-prometheus-stack"
  version    = var.prometheus_chart_version

  namespace        = var.namespace         # "monitoring"
  create_namespace = true                  # <— enable this

  atomic  = true
  values  = [file("${path.module}/arc-scrape-config.yaml")]
}



###########################

# modules/prometheus_stack/main.tf (add this block)
resource "kubectl_manifest" "monitoring_namespace" {
  yaml_body = <<YAML
apiVersion: v1
kind: Namespace
metadata:
  name: ${var.namespace}       # default "monitoring"
  labels:
    kubernetes.io/metadata.name: ${var.namespace}
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: v1.30
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/audit-version: v1.30
    pod-security.kubernetes.io/warn: baseline
    pod-security.kubernetes.io/warn-version: v1.30
YAML
}

# keep your Helm release, but don't create the namespace here
resource "helm_release" "prometheus_stack" {
  name             = "kube-prometheus-stack"
  namespace        = var.namespace
  create_namespace = false                    # <— changed
  repository       = var.prometheus_chart_repo
  chart            = "actions/prometheus/kube-prometheus-stack"
  version          = var.prometheus_chart_version
  atomic           = true
  values           = [file("${path.module}/arc-scrape-config.yaml")]

  depends_on = [kubectl_manifest.monitoring_namespace]
}





